import numpy as np
from numba import njit


@njit
def get_gauss_quadratureDG(nCount):
    """Gauss Quadrature Points for integration.

    Parameters
    ----------

    nCount : int, required
         Degree (integer) of quadrature points required, supports: 1 to 10.

    Returns:
        dG : double
            numpy array of size ncount, quadrature points
        dW : double
            numpy array of size ncount x 3, weights
        Note: dG and dW are scaled before returning
    Raises:
       RuntimeError: Invalid degree
    """
    #Degree 1
    if (nCount == 1):
        dG = np.array([0.0])
        dW = np.array([+2.0])

    #Degree 2
    elif (nCount == 2):
        dG = np.array([-0.5773502691896257, +0.5773502691896257])
        dW = np.array([+1.0, +1.0])

    #Degree 3
    elif (nCount == 3):
        dG = np.array([-0.7745966692414834, 0.0, +0.7745966692414834])

        dW = np.array(
            [+0.5555555555555556, +0.8888888888888888, +0.5555555555555556])

    #Degree 4
    elif (nCount == 4):
        dG = np.array([
            -0.8611363115940526, -0.3399810435848563, +0.3399810435848563,
            +0.8611363115940526
        ])

        dW = np.array([
            0.3478548451374538, 0.6521451548625461, 0.6521451548625461,
            0.3478548451374538
        ])

    #Degree 5
    elif (nCount == 5):
        dG = np.array([
            -0.9061798459386640, -0.5384693101056831, 0.0, +0.5384693101056831,
            +0.9061798459386640
        ])

        dW = np.array([
            0.2369268850561891, 0.4786286704993665, 0.5688888888888889,
            0.4786286704993665, 0.2369268850561891
        ])

    #Degree 6
    elif (nCount == 6):
        dG = np.array([
            -0.9324695142031521, -0.6612093864662645, -0.2386191860831969,
            +0.2386191860831969, +0.6612093864662645, +0.9324695142031521
        ])

        dW = np.array([
            0.1713244923791704, 0.3607615730481386, 0.4679139345726910,
            0.4679139345726910, 0.3607615730481386, 0.1713244923791704
        ])

    #Degree 7
    elif (nCount == 7):
        dG = np.array([
            -0.9491079123427585, -0.7415311855993945, -0.4058451513773972, 0.0,
            +0.4058451513773972, +0.7415311855993945, +0.9491079123427585
        ])

        dW = np.array([
            0.1294849661688697, 0.2797053914892766, 0.3818300505051189,
            0.4179591836734694, 0.3818300505051189, 0.2797053914892766,
            0.1294849661688697
        ])

    #Degree 8
    elif (nCount == 8):
        dG = np.array([
            -0.9602898564975363, -0.7966664774136267, -0.5255324099163290,
            -0.1834346424956498, +0.1834346424956498, +0.5255324099163290,
            +0.7966664774136267, +0.9602898564975363
        ])

        dW = np.array([
            0.1012285362903763, 0.2223810344533745, 0.3137066458778873,
            0.3626837833783620, 0.3626837833783620, 0.3137066458778873,
            0.2223810344533745, 0.1012285362903763
        ])

    #Degree 9
    elif (nCount == 9):
        dG = np.array([
            -1.0, -0.899757995411460, -0.677186279510738, -0.363117463826178,
            0.0, +0.363117463826178, +0.677186279510738, +0.899757995411460,
            +1.0
        ])

        dW = np.array([
            0.0812743883615744, 0.1806481606948574, 0.2606106964029354,
            0.3123470770400029, 0.3302393550012598, 0.3123470770400029,
            0.2606106964029354, 0.1806481606948574, 0.0812743883615744
        ])

    #Degree 10
    elif (nCount == 10):
        dG = np.array([
            -0.9739065285171717, -0.8650633666889845, -0.6794095682990244,
            -0.4333953941292472, -0.1488743389816312, +0.1488743389816312,
            +0.4333953941292472, +0.6794095682990244, +0.8650633666889845,
            +0.9739065285171717
        ])

        dW = np.array([
            0.0666713443086881, 0.1494513491505806, 0.2190863625159820,
            0.2692667193099963, 0.2955242247147529, 0.2955242247147529,
            0.2692667193099963, 0.2190863625159820, 0.1494513491505806,
            0.0666713443086881
        ])

    # else:
    #     msg = "quadrature order 1 to 10 is supported: ", nCount, " is invalid\n"
    #     raise ValueError(msg)

    # Scale quadrature points
    dXi0 = 0.0
    dXi1 = 1.0
    for i in range(nCount):
        dG[i] = dXi0 + 0.5 * (dXi1 - dXi0) * (dG[i] + 1.0)
        dW[i] = 0.5 * (dXi1 - dXi0) * dW[i]

    return dG, dW
